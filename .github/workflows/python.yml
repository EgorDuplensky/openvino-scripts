name: Python Validation

on:
  issue_comment:
    types: [created, edited]
  # optional – lets you run it from the "Actions" tab while debugging
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write
  statuses: write

jobs:
  python:
    if: github.event.issue.pull_request &&
        (contains(github.event.comment.body, '/check-python-flake8') ||
         contains(github.event.comment.body, '/check-python-isort') ||
         contains(github.event.comment.body, '/check-python') ||
         contains(github.event.comment.body, '/check-all'))
    runs-on: ubuntu-latest

    steps:
    - name: Get PR details
      id: pr
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pullRequest } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          return {
            ref: pullRequest.head.ref,
            sha: pullRequest.head.sha,
            repo_full_name: pullRequest.head.repo.full_name
          };
    
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        repository: ${{ fromJson(steps.pr.outputs.result).repo_full_name }}
        ref: ${{ fromJson(steps.pr.outputs.result).ref }}
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install Python tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 isort
    
    - name: Run isort check
      id: isort
      if: contains(github.event.comment.body, '/check-python-isort') ||
          contains(github.event.comment.body, '/check-python') ||
          contains(github.event.comment.body, '/check-all')
      run: |
        echo "Checking import sorting with isort..."
        if python3 -m isort --check-only --diff .; then
          echo "isort_status=success" >> $GITHUB_OUTPUT
          echo "isort_message=✅ All imports are properly sorted" >> $GITHUB_OUTPUT
        else
          echo "isort_status=failure" >> $GITHUB_OUTPUT
          echo "isort_message=❌ Some imports need sorting" >> $GITHUB_OUTPUT
        fi
    
    - name: Run flake8 on all Python scripts
      id: flake8
      if: contains(github.event.comment.body, '/check-python-flake8') ||
          contains(github.event.comment.body, '/check-python') ||
          contains(github.event.comment.body, '/check-all')
      run: |
        echo "Running flake8 on all Python scripts..."
        if find . -name "*.py" -exec python3 -m flake8 {} +; then
          echo "flake8_status=success" >> $GITHUB_OUTPUT
          echo "flake8_message=✅ All Python scripts passed flake8" >> $GITHUB_OUTPUT
        else
          echo "flake8_status=failure" >> $GITHUB_OUTPUT
          echo "flake8_message=❌ Some Python scripts failed flake8" >> $GITHUB_OUTPUT
        fi
    
    - name: Set overall status
      id: overall
      run: |
        isort_ran="${{ steps.isort.outcome }}"
        flake8_ran="${{ steps.flake8.outcome }}"
        isort_status="${{ steps.isort.outputs.isort_status }}"
        flake8_status="${{ steps.flake8.outputs.flake8_status }}"
        
        # Check if both tools that ran were successful
        success=true
        if [[ "$isort_ran" != "skipped" && "$isort_status" != "success" ]]; then
          success=false
        fi
        if [[ "$flake8_ran" == "success" && "$flake8_status" != "success" ]]; then
          success=false
        fi
        
        if [[ "$success" == "true" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ All Python checks passed" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Python checks failed" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Update commit statuses
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const sha = '${{ fromJson(steps.pr.outputs.result).sha }}';
          const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          // python status (required check)
          const overallState = '${{ steps.overall.outputs.status }}' === 'success' ? 'success' : 'failure';
          const overallDescription = '${{ steps.overall.outputs.message }}';
          
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: sha,
            state: overallState,
            target_url: runUrl,
            description: overallDescription,
            context: 'python'
          });
          
          // python-flake8 status (only if ran)
          const flake8Ran = '${{ steps.flake8.outcome }}' !== 'skipped';
          if (flake8Ran) {
            const flake8State = '${{ steps.flake8.outputs.flake8_status }}' === 'success' ? 'success' : 'failure';
            const flake8Description = '${{ steps.flake8.outputs.flake8_message }}';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: flake8State,
              target_url: runUrl,
              description: flake8Description,
              context: 'python-flake8'
            });
          }
          
          // python-isort status (only if ran)
          const isortRan = '${{ steps.isort.outcome }}' !== 'skipped';
          if (isortRan) {
            const isortState = '${{ steps.isort.outputs.isort_status }}' === 'success' ? 'success' : 'failure';
            const isortDescription = '${{ steps.isort.outputs.isort_message }}';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: isortState,
              target_url: runUrl,
              description: isortDescription,
              context: 'python-isort'
            });
          }
